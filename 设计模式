https://blog.csdn.net/qq_33854260/article/details/77398781
设计模式运用了面向对象编程语言的重要特性：封装、继承和多态
一、设计模式的分类
创建型模式：工厂模式、单例模式、建造者模式、原型模式。
结构型模式：共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。
行为型模式：观察者模式、责任链模式、策略模式、模板方法模式、迭代子模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。
工厂模式
1.简单工厂模式：需要在工厂类中中做判断，从而创造相应的产品，当增加新的产品时，需要修改工厂类。缺点是要增加新的核类型时，就需要修改工厂类，这就违反了开放封闭原则：软件实体（类、模块、函数）可以扩展，但是不可修改。
举例：有一家生产处理器核的厂家，它只有一个工厂，能够生产两种型号的处理器核。客户需要什么样的处理器核，一定要显式的告诉生产工厂。
enum CTYPE {COREA, COREB};     
class SingleCore{    
public:    
    virtual void Show() = 0;  
};    
//单核A    
class SingleCoreA: public SingleCore{    
public:    
    void Show() { cout<<"SingleCore A"<<endl; }    
};    
//单核B    
class SingleCoreB: public SingleCore{    
public:    
    void Show() { cout<<"SingleCore B"<<endl; }    
};    
//唯一的工厂，可以生产两种型号的处理器核，在内部判断    
class Factory{    
public:     
    SingleCore* CreateSingleCore(enum CTYPE ctype){    
        if(ctype == COREA) //工厂内部判断    
            return new SingleCoreA(); //生产核A    
        else if(ctype == COREB)    
            return new SingleCoreB(); //生产核B    
        else    
            return NULL;    
    }    
}; 

2.工厂方法模式
定义一个用于创建对象的接口，让子类决定实例化哪一个类。
举例：上家产家赚了不少钱，决定再开设一个工厂专门用来生产B型号的单核，原来的工厂专门生产A型号的单核。这时，客户要做的是找好工厂，比如要A型的核就找A厂要，否则就找B厂要，不再需要告诉工厂具体要什么型号的处理器核了
缺点：每增加一种产品，就需要增加一个对象的工厂，如果这家工厂发展迅速，推出了很多新的处理器核，那么就需要开设相应的新工厂，在c++实现中，就是要定义一个个的工厂类。显然，相比简单工厂模式，工厂方法模式需要更多的类定义。
class SingleCore{    
public:    
    virtual void Show() = 0;  
};    
//单核A    
class SingleCoreA: public SingleCore{    
public:    
    void Show() { cout<<"SingleCore A"<<endl; }    
};    
//单核B    
class SingleCoreB: public SingleCore{    
public:    
    void Show() { cout<<"SingleCore B"<<endl; }    
};    
class Factory{    
public:    
    virtual SingleCore* CreateSingleCore() = 0;  
};    
//生产A核的工厂    
class FactoryA: public Factory{    
public:    
    SingleCoreA* CreateSingleCore() { return new SingleCoreA; }    
};    
//生产B核的工厂    
class FactoryB: public Factory    
{    
public:    
    SingleCoreB* CreateSingleCore() { return new SingleCoreB; }    
};

3.抽象工厂模式
它的定义为提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。
举例：这家公司的技术不断进步，不仅可以生产单核处理器，还能生产多核处理器。现在利用抽象工厂模式，这家公司还是开设两个工厂，一个专门用来生产A型号的单核多核处理器，另一个工厂专门用来生产B型号的单核多核处理器
//单核    
class SingleCore{    
public:    
    virtual void Show() = 0;  
};    
class SingleCoreA: public SingleCore{    
public:    
    void Show() { cout<<"Single Core A"<<endl; }    
};    
class SingleCoreB :public SingleCore{    
public:    
    void Show() { cout<<"Single Core B"<<endl; }    
};    
//多核    
class MultiCore{    
public:    
    virtual void Show() = 0;  
};    
class MultiCoreA : public MultiCore{    
public:    
    void Show() { cout<<"Multi Core A"<<endl; }    
    
};    
class MultiCoreB : public MultiCore{    
public:    
    void Show() { cout<<"Multi Core B"<<endl; }    
};    
//工厂    
class CoreFactory{    
public:    
    virtual SingleCore* CreateSingleCore() = 0;  
    virtual MultiCore* CreateMultiCore() = 0;  
};    
//工厂A，专门用来生产A型号的处理器    
class FactoryA :public CoreFactory{    
public:    
    SingleCore* CreateSingleCore() { return new SingleCoreA(); }    
    MultiCore* CreateMultiCore() { return new MultiCoreA(); }    
};    
//工厂B，专门用来生产B型号的处理器    
class FactoryB : public CoreFactory{    
public:    
    SingleCore* CreateSingleCore() { return new SingleCoreB(); }    
    MultiCore* CreateMultiCore() { return new MultiCoreB(); }    
};

单例模式
单例模式的实现比较简单，由于构造函数是私有的，因此无法通过析构函数实例化，唯一的方法就是通过调用静态函数GetInstance
class Singleton    
{  
public:  
    static Singleton* GetInstance();  
private:  
    Singleton() {}  
    static Singleton *singleton;  
};  
//Singleton.cpp  
Singleton* Singleton::singleton = NULL;  
Singleton* Singleton::GetInstance()  
{  
    if(singleton == NULL)  
        singleton = new Singleton();  
    return singleton;  
}

观察者模式
定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。
举例：举个博客订阅的例子，当博主发表新文章的时候，即博主状态发生了改变，那些订阅的读者就会收到通知，然后进行相应的动作，比如去看文章，或者收藏起来，博主与读者之间存在种一对多的依赖关系。博客类中有一个观察者链表（订阅者），当博主的状态发生变化的时候，通过notify成员函数通知所有的观察者，告诉他们博客的状态更新了，而观察者通过update成员函数获取博客的状态信息
//观察者  
class Observer{  
public:  
    Observer() {}  
    virtual ~Observer() {}  
    virtual void Update() {}   
};  
//博客  
class Blog{  
public:  
    Blog() {}  
    virtual ~Blog() {}  
    //添加观察者
    void Attach(Observer *observer) { m_observers.push_back(observer); }
    //移除观察者       
    void Remove(Observer *observer) { m_observers.remove(observer); }    
    void Notify() //通知观察者  
    {  
        list<Observer*>::iterator iter = m_observers.begin();  
        for(; iter != m_observers.end(); iter++)  
            (*iter)->Update();  
    }  
    virtual void SetStatus(string s) { m_status = s; } //设置状态  
    virtual string GetStatus() { return m_status; }    //获得状态  
private:  
    list<Observer* > m_observers; //观察者链表  
protected:  
    string m_status; //状态  
};

